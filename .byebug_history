exit
c
exit
possible_paths
path_array
possible_paths.shift
mountain.shift
array.shift
new_path
path_array
exit
possible_paths
exit
array[a.first[1]][a.first[0]]
a
exit
possible_paths.find_all{|x| x.length == max_length.length}
possible_paths.find_all{|x| x.length }
possible_paths.find_all{|x| x.length = max_length.length}
max_length.length
all_with_max_length = possible_paths.find_all{|x| x.length = max_length.length}
max_length
[[0,0]].length
[0,0].length
all_with_max_length = possible_paths.find_all{|x| x.length = max_length}
max_length = possible_paths.max_by{|a| a.length}
possible_paths.max {|a, b| a.length <=> b.length}
possible_paths.max_by{|a| a.length}
possible_paths
c
dim[0]
dim[1]
y
array[y+1][x]
!array[y+1][x].nil?
y < dim[1] 
y < dim[1] && !array[y+1][x].nil?
array[y][x+1] < coord
x < dim[0] && !array[y][x+1].nil?
array[y-1][x] < coord
y > 0 && !array[y-1][x].nil?
path_array
c
path_array
possible_paths
c
possible_paths
path_array
c
path_array
c
path_array
c
path_array
count
c
path_array
possible_paths
c
possible_paths << new_path
new_path << [x,y+1]
new_path = path_array.dup
array[y+1][x] < coord
y < dim[1] && !array[y+1][x].nil?
path_array
dim[1]
c
exit
c
possible_paths
c
possible_paths
path_array
c
possible_paths
c
possible_paths
path_array
c
possible_paths
path_array
c
exit
array[y+1][x] < coord
array[y][x+1] < coord
x < dim[0]
dim[0]
y > 0
y
x
array[1][1]
path_array
c
path_array
count
c
path_array
count
c
path_array
count
counter
exit
i
c
i
exit
path_array
x
c
x
path_array
c
possible_paths
path_array
x
c
path_array
x
exit
path_array
possible_paths
c
path_array
c
path_array
possible_paths
c
exit
path_array
array[1][1]
array[0][2]
array[0][1]
array[1][0]
possible_paths
c
possible_paths
c
possible_paths
c
possible_paths
exit
possible_paths
c
possible_paths
exit
possible_paths
c
array[y][x+1] < coord
array[y][x]
x>0
y>0
y
x
possible_paths
c
possible_paths
c
possible_paths
c
coord.class
exit
c
n
array[y-1][x] < coord
array[y-1][x]
coord
exit
c
possible_paths
c
exit
possible_paths
path_array
c
path_array
exit
a.zip(b)
a + b
b=[1,1]
a = [0,0]
path_array += [0,1]
path_array
c
path_array
exit
array[1][0]
y
exit
array[0][1]
array[3][3]
array[0][0]
possible_paths
exit
array[1][0]
array[0][1]
y
x
exit
c
exit
c
exit
c
exit
element > array[row_index - 1].values_at(element_index).join("").to_i
element > array[row_index - 1].values_at(element_index)
array[row_index - 1].values_at(element_index)
element
n
row_index - 1
row_index
n
